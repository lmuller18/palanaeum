datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String  @id @default(cuid())
  email      String  @unique
  username   String
  avatar     String
  background String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  managedClubs Club[]
  members      Member[]
  password     Password?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Club {
  id     String @id @default(cuid())
  title  String
  author String
  image  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapters Chapter[]
  members  Member[]

  ownerId String
}

model Chapter {
  id    String @id @default(cuid())
  title String
  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  club        Club         @relation(fields: [clubId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  progress    Progress[]
  posts       Post[]
  discussions Discussion[]

  clubId String
}

model Member {
  id      String  @id @default(cuid())
  isOwner Boolean @default(false)
  removed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  club        Club         @relation(fields: [clubId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  progress    Progress[]
  posts       Post[]
  discussions Discussion[]
  comments    Comment[]

  userId String
  clubId String
}

model Progress {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  completedAt DateTime @default(now())
  member      Member   @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  memberId  String
  chapterId String

  @@id([memberId, chapterId])
}

model Post {
  id      String  @id @default(cuid())
  content String
  context String?
  image   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent  Post?   @relation("CommentThread", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  root    Post?   @relation("PostToRoot", fields: [rootId], references: [id])
  posts   Post[]  @relation("PostToRoot")

  chapterId String
  memberId  String
  parentId  String?
  rootId    String?
  replies   Post[]  @relation("CommentThread")
}

model Discussion {
  id      String  @id @default(cuid())
  title   String
  content String?
  image   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  member  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replies Comment[]

  chapterId String
  memberId  String
}

model Comment {
  id      String @id @default(cuid())
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discussion Discussion @relation(fields: [discussionId], references: [id])
  member     Member     @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent     Comment?   @relation("DiscussionCommentThread", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  root       Comment?   @relation("CommentToRoot", fields: [rootId], references: [id])
  posts      Comment[]  @relation("CommentToRoot")

  discussionId String
  memberId     String
  parentId     String?
  rootId       String?
  replies      Comment[] @relation("DiscussionCommentThread")
}
